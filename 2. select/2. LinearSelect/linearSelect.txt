#include <stdio.h>
#include <stdlib.h>
void printIntArr(int* arr, int n){
	for(int i = 0 ; i < n ; i ++) {
		printf("%d ", arr[i]);
	}
}

void change(int* arr, int index1, int index2) {
	
    int temp = arr[index1];
    arr[index1] = arr[index2];
    arr[index2] = temp;
    return;
}

int partition(int* arr, int p, int r) {
	int x = arr[r-1];
	int i = p-1;
	for( int j = p ; j < r ; j++){
		if(arr[j-1] <= x) {
			i++;
			change(arr, i-1, j-1);
		}
	}
	change(arr, i, r-1);
	
	return i+1;
}

int select(int* arr, int p, int r, int i){
	
   if (p == r) {
		return arr[p-1];
   }
   
   int q = partition(arr, p, r);
   
   int k = q - p + 1;
   
   if(i < k) {
   		return select(arr, p, q - 1, i);
   }
   else if(i > k){
    	return select(arr, q + 1, r, i - k);
   }
   else return arr[q-1];
}

int partitionByMedian(int* arr, int p, int r, int M){
	
   int size = r - p + 1;
   int i = 0;
   while(i < size){
		if(arr[p + i - 1] == M ) break;
		i++;
   }
   change(arr, p + i - 1, r-1);
 
   return partition(arr, p, r);
}

int ceil(double num){
	int temp = (int) num;
	
	if(num - temp == 0){
		return temp;
	}
	
	else{
		return temp + 1;	
	}
}

int linearSelect(int* arr, int p , int r, int index){

	int size = r - p + 1;
	if( size <= 5 ) {
		return select(arr, p, r, index);
	}
	
	int groupSize = ceil(size/5.0);
    int * medArr = (int*)malloc(sizeof(int) * groupSize);
    
	int i, j, length, param, median;

	for(i = 0; i < groupSize - 1; i++){
		medArr[i] = select(arr, p + i * 5, p + ((i+1) * 5) - 1, 3);
	}
	
	//printf("index1=%d, index2=%d, length = %d\n", p + i * 5, r, ceil( (r - (p + i * 5) + 1 )/2.0 ));
	medArr[i] = select(arr, p + i * 5, r, ceil( (r - (p + i * 5) + 1 )/2.0 ) );
	
//printIntArr(medArr, groupSize);
//	printf("\n");
	
	median = linearSelect(medArr, 0, groupSize - 1, ceil(groupSize/2.0));
	printf("%d \n", median);
    
    int q = partitionByMedian(arr, p, r, median);
 	int k = q - p + 1;
    
    if(index < k) {
    	return linearSelect(arr, p , q - 1 , index);
    }
    else if(index > k){
      	return linearSelect(arr, q + 1 , r, index - k);
    }
    else return arr[q];
}

// main
int main() {
	int size, index;
    scanf("%d %d", &size, &index);
    
    int *inputArr = (int*)malloc(sizeof (int) * size);
    for (int i = 0; i < size; i++) {
        scanf("%d",&inputArr[i]);
	}
	int result = linearSelect(inputArr, 1, size, index);
	//printf("result = %d", result);
	return 0;
}